<script setup >
import { storeToRefs } from 'pinia';
import ChatListItem from "@/view/customer/chat/chatComponent/chatListItem.vue";
import {useSelectedChatStore} from "@/pinia/modules/chat/selectedChat.js";
import {useChatPaginationStore} from "@/pinia/modules/chat/chatPagination.js";
import {computed} from "vue";
import {usePendingChatStore} from "@/pinia/modules/chat/pendingChat.js";

const selectedChatStore= useSelectedChatStore();
const chatPaginationStore=  useChatPaginationStore()
const pendingChatStore=usePendingChatStore()
// 直接使用筛选后的房间数组（已包含排序）
const { filteredChatRooms } = storeToRefs(chatPaginationStore);

// 处理列表项点击
const handleItemClick = (id) => {
  console.log(id,currentChatRooms)
  selectedChatStore.setSelectedChatRoom(id);  //选中的room

};

// 根据状态计算当前应显示的聊天房间列表
const currentChatRooms = computed(() => {

  return pendingChatStore.pendingChatStatus
      ? pendingChatStore.pendingRooms
      : filteredChatRooms.value
})
</script>

<template>
  <div class="chat-list-container">
    <div
        class="chat-list-item"
        v-for="room in currentChatRooms"
        :key="room.id"
        @click="handleItemClick(room.id)"
    >
----------------------------------

// 已接入按钮点击事件处理函数
const handleConnectedClick = () => {
  console.log('已接入按钮被点击');
  pendingChatStore.pendingChatStatus=0
};

// 待接入按钮点击事件处理函数
const handlePendingClick = async () => {
  console.log('待接入按钮被点击');
  pendingChatStore.pendingChatStatus=1
};

-----------------------

import { defineStore } from 'pinia'
import {reactive, computed, ref, onMounted} from 'vue'
import {transformBackendPendingRoomToFrontend} from "@/pinia/modules/chat/transform.js";
// 若有接口，导入对应API（示例用demo数据）
// import { getPendingChatRooms } from "@/api/customer/chat.js";

export const usePendingChatStore = defineStore('pendingChat', () => {
    // 1. 待接入房间列表（reactive：支持动态修改）
    const pendingRooms = reactive([])
    const pendingRoomDemo = reactive([

        {
            chatId: 999,
            customerName: "张三",
            messageItem:{
                content: '新用户，请确认是否接入？',
                createAt: '2025-09-18 10:00:00',
                type: 'text',
                sender: '123123',
                status:0
            }
        },
        {
            chatId: 888,
            customerName: "张三",
            messageItem:{
                content: '新用户，请确认是否接入？',
                createAt: '2025-09-18 10:00:00',
                type: 'text',
                sender: '123123',
                status:0
            }
        }

    ]);

    const pendingChatStatus = ref(0)
    // 2. 待接入数量（计算属性：避免手动维护数量）
    const pendingCount = computed(() => pendingRooms.length);

    // 3. 加载待接入房间（真实场景调用接口）
    const loadPendingRooms = async () => {
        try {

            // 真实场景：调用接口获取待接入列表
            // const res = await getPendingChatRooms();
            // pendingRooms.length = 0; // 清空旧数据
            // pendingRooms.push(...res.data.list);
            pendingRoomDemo.forEach( room=> {
                pendingRooms.push(transformBackendPendingRoomToFrontend(room))
            })
            console.log(pendingRooms)
            // 演示用：添加demo待接入房间
        } catch (err) {
            console.error('加载待接入房间失败:', err);
        }
    };

    // 4. 分配待接入房间（某客服认领后从列表移除）
    const assignPendingRoom = (roomId) => {
        const index = pendingRooms.findIndex(room => room.id === roomId);
        if (index > -1) pendingRooms.splice(index, 1);
    };
    // 页面挂载时初始化
    onMounted(() => {
        loadPendingRooms();
    });

    // 暴露状态和方法
    return {
        pendingRooms,
        pendingCount,
        loadPendingRooms,
        assignPendingRoom,
        pendingChatStatus
    };
});

------------------------
export const transformBackendPendingRoomToFrontend = (room) => {
    console.log("转换后端房间数据为前端Pinia所需格式")
    return {
        // 字段映射：后端chatId → 前端id
        id: room.chatId,
        // 后端customer是数组，前端是对象（假设数组中只有一个客户）
        customer: {
            fullName: room.customerName,
        },
        // 后端conversationList → 前端conversations，同时转换会话内字段
        conversationList: [
            {
                createAt:room.messageItem.createAt?formatTimeToStr(room.messageItem.createAt*1000, 'yyyy-MM-dd hh:mm:ss') : '',
                messageList: [
                    {
                        content: room.messageItem.content,
                        messageType: room.messageItem.messageType,
                        senderId: room.messageItem.senderId,
                        createAt: room.messageItem.createAt ? formatTimeToStr(new Date(room.messageItem.createAt*1000),'yyyy-MM-dd hh:mm:ss') : '',
                        status: room.messageItem.status === 1 ? 1 : 0 // 状态映射
                    }
                ]
            }
        ],
        lasetMessage:room.messageItem,
        lasetMessageTime:room.messageItem.createAt? formatTimeToStr(room.messageItem.createAt*1000, 'yyyy-MM-dd hh:mm:ss') : '',
    };
};